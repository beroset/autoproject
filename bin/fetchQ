#!/usr/bin/env python3
""" Code Review question fetcher.  Given the number of the question, uses
the StackExchange API version 2.2 to fetch the markdown of the question and
write it to a local file with the name given as the second argument. """
import sys
MIN_PYTHON = (3, 5)
if sys.version_info < MIN_PYTHON:
    sys.exit("Python %s.%s or later is required.\n" % MIN_PYTHON)

import urllib.request
import urllib.parse
import urllib.error
import io
import os
import gzip
import json
import struct
import html.parser
from subprocess import run


def make_URL(qnumber):
    return 'https://api.stackexchange.com/2.3/questions/' + \
        str(qnumber) + \
        '/?order=desc&sort=activity&site=codereview' + \
        '&filter=!)5IYc5cM9scVj-ftqnOnMD(3TmXe' + \
        '&key=1zS9hPycH2IKPkjCZh5OUw(('


def fetch_compressed_data(url):
    return urllib.request.urlopen(url).read()


def fetch_question_markdown(qnumber):
    url = make_URL(qnumber)
    try:
        data = fetch_compressed_data(url)
    except urllib.error.URLError as err:
        if hasattr(err, 'reason'):
            print('Could not reach server.')
            print(('Reason: ', err.reason))
            sys.exit(1)
        elif hasattr(err, 'code'):
            print(f'Error: {err.code}: while fetching data from {url}')
            sys.exit(1)
    try:
        m = json.loads(data)
    except json.JSONDecodeError as err:
        print(f'Error: {err.msg}')
        sys.exit(1)
    return m['items'][0]


def getMessage():
    rawLength = sys.stdin.buffer.read(4)
    if len(rawLength) == 0:
        sys.exit(0)
    messageLength = struct.unpack('@I', rawLength)[0]
    sendMessage(encodeMessage(f'attempting to read {messageLength} bytes'))
    message = sys.stdin.buffer.read(messageLength).decode('utf-8')
    return json.loads(message)


# Encode a message for transmission,
# given its content.
def encodeMessage(messageContent):
    encodedContent = json.dumps(messageContent).encode('utf-8')
    encodedLength = struct.pack('@I', len(encodedContent))
    return {'length': encodedLength, 'content': encodedContent}


# Send an encoded message to stdout
def sendMessage(encodedMessage):
    sys.stdout.buffer.write(encodedMessage['length'])
    sys.stdout.buffer.write(encodedMessage['content'])
    sys.stdout.buffer.flush()


if __name__ == '__main__':
    if len(sys.argv) != 3:
        print(f'Usage: {sys.argv[0]} fetchQ questionnumber mdfilename')
        sys.exit(1)
    qnumber, qname = sys.argv[1:3]
    # are we being called as a Web Extension?
    if (qname == 'autoproject@beroset.com'):
        msg = getMessage()
        basedir = os.getenv('AUTOPROJECT_DIR', '/tmp')
        qnumber = msg['question_id']
        qname = f'{basedir}/{qnumber}.md'
    else:
        msg = fetch_question_markdown(qnumber)

    md = html.unescape(msg['body_markdown']).replace('\r\n', '\n').encode('utf-8')
    title = html.unescape(msg['title'])
    tags = msg['tags']
    header = f'# [{title}](https://codereview.stackexchange.com/questions/{qnumber})\n### tags: {tags}\n\n'
    with open(qname, 'wb') as f:
        f.write(header.encode('utf-8'))
        f.write(md)
    run(["autoproject", qname])
